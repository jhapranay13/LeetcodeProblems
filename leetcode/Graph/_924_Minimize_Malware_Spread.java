package leetcode.Graph;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.
 *
 * Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.
 *
 * Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.
 *
 * Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.
 *
 * Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.
 *
 *
 *
 * Example 1:
 *
 * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * Output: 0
 * Example 2:
 *
 * Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
 * Output: 0
 * Example 3:
 *
 * Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
 * Output: 1
 *
 *
 * Constraints:
 *
 * n == graph.length
 * n == graph[i].length
 * 2 <= n <= 300
 * graph[i][j] is 0 or 1.
 * graph[i][j] == graph[j][i]
 * graph[i][i] == 1
 * 1 <= initial.length <= n
 * 0 <= initial[i] <= n - 1
 * All the integers in initial are unique.
 *
 *
 */

public class _924_Minimize_Malware_Spread {
    class UnionFind {
        int[] parent;
        int[] size;

        public UnionFind(int size) {
            this.parent = new int[size];

            for (int i = 0; i < size; i++) {
                this.parent[i] = i;
            }
            this.size = new int[size];
            Arrays.fill(this.size, 1);
        }

        public int find(int x) {

            if (this.parent[x] != x) {
                return this.parent[x] = find(parent[x]);
            }
            return x;
        }

        public int size(int x) {
            return this.size[find(x)];
        }

        public void union(int x, int y) {
            int[] tempParetn = this.parent;
            int[] tempSize = this.size;
            int px = find(x);
            int py = find(y);

            if (px != py) {
                this.parent[py] = px;
                this.size[px] += this.size[py];
            }
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        UnionFind uf = new UnionFind(graph.length);
        // Grouping the connections
        for (int i = 0; i < graph.length; i++) {

            for (int j = 0; j < graph.length; j++) {

                if (graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }
        Map<Integer, Integer> unionSize = new HashMap<>();

        for (int i = 0; i < graph.length; i++) {
            int parent = uf.find(i);

            if (!unionSize.containsKey(parent)) {
                unionSize.put(parent, uf.size(parent));
            }
        }
        Map<Integer, Integer> malWareCountInParent = new HashMap<>();
        int minIntital = Integer.MAX_VALUE;

        for (int init : initial) {
            minIntital = Math.min(minIntital, init);
            int parent = uf.find(init);
            malWareCountInParent.put(parent, malWareCountInParent.getOrDefault(parent, 0) + 1);
        }
        int ans = -1;
        int size = Integer.MIN_VALUE;

        for (int init : initial) {
            int parent = uf.find(init);
            int numberOfMalware = malWareCountInParent.get(parent);
            // checking for 1 because if there are 2 malware removing one would not make any difference
            if (numberOfMalware == 1) {

                if (unionSize.get(parent) == size) {
                    ans = Math.min(ans, init);
                }

                if (unionSize.get(parent) > size) {
                    ans = init;
                    size = unionSize.get(parent);
                }
            }
        }
        // if no answer found then return minIntital
        if (ans == -1) {
            return minIntital;
        }
        return ans;
    }
}
